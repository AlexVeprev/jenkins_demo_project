pipeline {
    agent none
    stages {
        stage('Build') {
            agent {
                docker {
                    image 'ghcr.io/alexveprev/jenkins_demo_project/demo_builder:latest'
                    registryUrl 'ghcr.io'
                    registryCredentialsId 'ghcr_token'
                }
                //
                // Alternative: build the image on the fly
                //
                // dockerfile {
                //     filename "jenkins/Dockerfile.builder"
                // }
            }
            steps {
                sh '''
                cmake -B build -S .
                cd build
                make VERBOSE=1
                ctest --output-on-failure
                cpack -G DEB
                '''
                stash includes: 'build/intsum-*-Linux.deb', name: 'linux_build'
            }
        }
        stage('Test matrix') {
            failFast true
            matrix {
                axes {
                   axis {
                       name 'OS'
                       values 'ub18', 'ub20', 'ub22', 'deb'
                   }
                }
                agent {
                    docker {
                        image "ghcr.io/alexveprev/jenkins_demo_project/demo_tester:${OS}"
                        registryUrl 'ghcr.io'
                        registryCredentialsId 'ghcr_token'
                    }
                    //
                    // Alternative: build images on the fly
                    //
                    // dockerfile {
                    //     filename "jenkins/Dockerfile.tester_${OS}"
                    // }
                }
                stages {
                    stage('Test') {
                        steps {
                            echo "Running for ${OS}"
                            unstash 'linux_build'
                            sh 'sudo apt install -y ./build/intsum-*-Linux.deb'
                            sh 'cat /etc/*release'
                            sh 'jenkins/test.sh'
                        }
                    }
                }
            }
        }
        stage('Release') {
            agent any
            when {
                buildingTag()
            }
            steps {
                unstash 'linux_build'
                // Groovy variant of jenkins/make_release.sh
                // TODO: implement in shared library
                script {
                    response = httpRequest \
                        httpMode: 'POST', \
                        url: GIT_URL.replace(".git", "/releases").replace("github.com", "api.github.com/repos"), \
                        authentication: "token_github_releases", \
                        requestBody: "{\"tag_name\":\"${TAG_NAME}\",\"name\":\"${TAG_NAME}\"}", \
                        consoleLogResponseBody: true

                    def parsed_response = readJSON text: response.content
                    def release_id = parsed_response.id

                    def asset = findFiles(glob: '**/*.deb')[0]

                    httpRequest \
                        httpMode: 'POST', \
                        url: GIT_URL.replace(".git", "/releases/").replace("github.com", "uploads.github.com/repos") + release_id + "/assets?name=" + asset.name, \
                        authentication: "token_github_releases", \
                        uploadFile: asset.path, \
                        multipartName: asset.name, \
                        timeout: 900, \
                        consoleLogResponseBody: true
                }
            }
        }
    }
}
